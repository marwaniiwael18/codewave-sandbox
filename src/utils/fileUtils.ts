import { FileItem } from '@/types';
import { v4 as uuidv4 } from 'uuid';

export const createNewFile = (name: string, parentPath: string = '', content: string = ''): FileItem => {
  const path = parentPath ? `${parentPath}/${name}` : name;
  const language = detectLanguageFromFileName(name);

  return {
    id: uuidv4(),
    name,
    path,
    content,
    language,
    type: 'file'
  };
};

export const createNewFolder = (name: string, parentPath: string = ''): FileItem => {
  const path = parentPath ? `${parentPath}/${name}` : name;

  return {
    id: uuidv4(),
    name,
    path,
    content: '',
    language: '',
    type: 'folder',
    children: [],
    isOpen: true
  };
};

export const detectLanguageFromFileName = (fileName: string): string => {
  const ext = fileName.split('.').pop()?.toLowerCase();
  switch (ext) {
    case 'js':
      return 'javascript';
    case 'jsx':
      return 'javascript';
    case 'ts':
      return 'typescript';
    case 'tsx':
      return 'typescript';
    case 'css':
      return 'css';
    case 'scss':
      return 'scss';
    case 'html':
      return 'html';
    case 'json':
      return 'json';
    case 'md':
      return 'markdown';
    case 'py':
      return 'python';
    case 'java':
      return 'java';
    case 'cpp':
    case 'cc':
    case 'cxx':
      return 'cpp';
    case 'c':
      return 'c';
    case 'php':
      return 'php';
    case 'rb':
      return 'ruby';
    case 'go':
      return 'go';
    case 'rs':
      return 'rust';
    case 'sh':
      return 'shell';
    case 'yml':
    case 'yaml':
      return 'yaml';
    case 'xml':
      return 'xml';
    case 'sql':
      return 'sql';
    default:
      return 'plaintext';
  }
};

export const findFileById = (files: FileItem[], id: string): FileItem | null => {
  for (const file of files) {
    if (file.id === id) {
      return file;
    }
    if (file.children) {
      const found = findFileById(file.children, id);
      if (found) return found;
    }
  }
  return null;
};

export const deleteFileById = (files: FileItem[], id: string): FileItem[] => {
  return files.filter(file => {
    if (file.id === id) {
      return false;
    }
    if (file.children) {
      file.children = deleteFileById(file.children, id);
    }
    return true;
  });
};

export const updateFileContent = (files: FileItem[], id: string, content: string): FileItem[] => {
  return files.map(file => {
    if (file.id === id) {
      return { ...file, content };
    }
    if (file.children) {
      return {
        ...file,
        children: updateFileContent(file.children, id, content)
      };
    }
    return file;
  });
};

export const addFileToFolder = (files: FileItem[], parentPath: string, newFile: FileItem): FileItem[] => {
  return files.map(file => {
    if (file.type === 'folder' && file.path === parentPath) {
      return {
        ...file,
        children: [...(file.children || []), newFile].sort((a, b) => {
          if (a.type !== b.type) {
            return a.type === 'folder' ? -1 : 1;
          }
          return a.name.localeCompare(b.name);
        })
      };
    }
    if (file.children) {
      return {
        ...file,
        children: addFileToFolder(file.children, parentPath, newFile)
      };
    }
    return file;
  });
};

export const downloadAllFiles = (files: FileItem[], projectName: string = 'codewave-project') => {
  // Create a zip-like structure as a text file for simplicity
  let content = `# ${projectName}\n\nGenerated by CodeWave\n\n`;
  
  const addFilesToContent = (items: FileItem[], prefix: string = '') => {
    items.forEach(item => {
      if (item.type === 'file') {
        content += `## ${prefix}${item.name}\n\`\`\`${item.language}\n${item.content}\n\`\`\`\n\n`;
      } else if (item.children) {
        content += `### üìÅ ${prefix}${item.name}/\n\n`;
        addFilesToContent(item.children, `${prefix}${item.name}/`);
      }
    });
  };

  addFilesToContent(files);

  const blob = new Blob([content], { type: 'text/markdown' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `${projectName}.md`;
  a.click();
  URL.revokeObjectURL(url);
};